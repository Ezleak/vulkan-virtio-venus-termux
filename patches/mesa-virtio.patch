diff --git a/src/util/os_misc.c b/src/util/os_misc.c
index f529318..1a53239 100644
--- a/src/util/os_misc.c
+++ b/src/util/os_misc.c
@@ -55,7 +55,7 @@
 #if DETECT_OS_ANDROID
 #  define LOG_TAG "MESA"
 #  include <unistd.h>
-#  include <log/log.h>
+#  include <android/log.h>
 #  include <cutils/properties.h>
 #elif DETECT_OS_LINUX || DETECT_OS_CYGWIN || DETECT_OS_SOLARIS || DETECT_OS_HURD || DETECT_OS_MANAGARM
 #  include <unistd.h>
@@ -131,7 +131,7 @@ os_log_message(const char *message)
    fputs(message, fout);
    fflush(fout);
 #  if DETECT_OS_ANDROID
-   LOG_PRI(ANDROID_LOG_ERROR, LOG_TAG, "%s", message);
+   __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, "%s", message);
 #  endif
 #endif
 }
diff --git a/src/virtio/vtest/vtest_protocol.h b/src/virtio/vtest/vtest_protocol.h
index c48be14..351b312 100644
--- a/src/virtio/vtest/vtest_protocol.h
+++ b/src/virtio/vtest/vtest_protocol.h
@@ -25,7 +25,7 @@
 #ifndef VTEST_PROTOCOL
 #define VTEST_PROTOCOL
 
-#define VTEST_DEFAULT_SOCKET_NAME "/tmp/.virgl_test"
+#define VTEST_DEFAULT_SOCKET_NAME "/data/data/com.termux/files/usr/tmp/.virgl_test"
 
 #ifdef VIRGL_RENDERER_UNSTABLE_APIS
 #define VTEST_PROTOCOL_VERSION 3
diff --git a/src/virtio/vulkan/vn_queue.c b/src/virtio/vulkan/vn_queue.c
index b48af03..fd5eb55 100644
--- a/src/virtio/vulkan/vn_queue.c
+++ b/src/virtio/vulkan/vn_queue.c
@@ -11,6 +11,7 @@
 #include "vn_queue.h"
 
 #include "util/libsync.h"
+#include "util/detect_os.h"
 #include "venus-protocol/vn_protocol_driver_event.h"
 #include "venus-protocol/vn_protocol_driver_fence.h"
 #include "venus-protocol/vn_protocol_driver_queue.h"
@@ -27,6 +28,10 @@
 #include "vn_renderer.h"
 #include "vn_wsi.h"
 
+#ifdef DETECT_OS_ANDROID
+#include <sync/sync.h>
+#endif
+
 /* queue commands */
 
 struct vn_submit_info_pnext_fix {
diff --git a/src/virtio/vulkan/vn_wsi.c b/src/virtio/vulkan/vn_wsi.c
index ca8e2a0..f8bacdd 100644
--- a/src/virtio/vulkan/vn_wsi.c
+++ b/src/virtio/vulkan/vn_wsi.c
@@ -65,6 +65,7 @@
 
 static PFN_vkVoidFunction
 vn_wsi_proc_addr(VkPhysicalDevice physicalDevice, const char *pName)
+   __attribute__((pcs("aapcs-vfp")))
 {
    struct vn_physical_device *physical_dev =
       vn_physical_device_from_handle(physicalDevice);
diff --git a/src/vulkan/wsi/wsi_common.c b/src/vulkan/wsi/wsi_common.c
index c06d4f7..8d25164 100644
--- a/src/vulkan/wsi/wsi_common.c
+++ b/src/vulkan/wsi/wsi_common.c
@@ -25,9 +25,11 @@
 #include "wsi_common_entrypoints.h"
 #include "util/u_debug.h"
 #include "util/macros.h"
+#include "util/detect_os.h"
 #include "util/os_file.h"
 #include "util/os_time.h"
 #include "util/xmlconfig.h"
+#include "vulkan/vulkan_core.h"
 #include "vk_device.h"
 #include "vk_fence.h"
 #include "vk_format.h"
@@ -1519,7 +1521,11 @@ wsi_common_queue_present(const struct wsi_device *wsi,
 #endif
       }
 
+#ifdef DETECT_OS_ANDROID
+      if (wsi->sw || swapchain->present_mode == VK_PRESENT_MODE_IMMEDIATE_KHR)
+#else
       if (wsi->sw)
+#endif
 	      wsi->WaitForFences(device, 1, &swapchain->fences[image_index],
 				 true, ~0ull);
 
diff --git a/src/vulkan/wsi/wsi_common_display.c b/src/vulkan/wsi/wsi_common_display.c
index c91633e..9e63aaa 100644
--- a/src/vulkan/wsi/wsi_common_display.c
+++ b/src/vulkan/wsi/wsi_common_display.c
@@ -20,9 +20,11 @@
  * OF THIS SOFTWARE.
  */
 
-#include "util/macros.h"
+#include <signal.h>
 #include <stdlib.h>
 #include <stdio.h>
+#include <asm/signal.h>
+#include <bits/signal_types.h>
 #include <sys/stat.h>
 #include <unistd.h>
 #include <errno.h>
@@ -46,6 +48,7 @@
 #include "util/list.h"
 #include "util/os_time.h"
 #include "util/timespec.h"
+#include "util/macros.h"
 
 #include "vk_device.h"
 #include "vk_fence.h"
@@ -1332,6 +1335,11 @@ static drmEventContext event_context = {
    .sequence_handler = wsi_display_sequence_handler,
 };
 
+static void 
+thread_signal_handler(int signum) {
+   pthread_exit(0);
+}
+
 static void *
 wsi_display_wait_thread(void *data)
 {
@@ -1340,8 +1348,11 @@ wsi_display_wait_thread(void *data)
       .fd = wsi->fd,
       .events = POLLIN
    };
-
+   
+#ifndef DETECT_OS_ANDROID
    pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, NULL);
+#endif
+
    for (;;) {
       int ret = poll(&pollfd, 1, -1);
       if (ret > 0) {
@@ -1369,9 +1380,22 @@ wsi_display_start_wait_thread(struct wsi_display *wsi)
 static void
 wsi_display_stop_wait_thread(struct wsi_display *wsi)
 {
+#ifdef DETECT_OS_ANDROID
+   struct sigaction actions;
+   memset(&actions, 0, sizeof (actions));
+   sigemptyset(&actions.sa_mask);
+   actions.sa_flags = 0;
+   actions.sa_handler = thread_signal_handler;
+   sigaction(SIGUSR2, &actions, NULL);
+#endif
+
    mtx_lock(&wsi->wait_mutex);
    if (wsi->wait_thread) {
+#ifdef DETECT_OS_ANDROID
+      pthread_kill(wsi->wait_thread, SIGUSR2);
+#else
       pthread_cancel(wsi->wait_thread);
+#endif
       pthread_join(wsi->wait_thread, NULL);
       wsi->wait_thread = 0;
    }
@@ -2340,6 +2364,15 @@ wsi_display_finish_wsi(struct wsi_device *wsi_device,
    struct wsi_display *wsi =
       (struct wsi_display *) wsi_device->wsi[VK_ICD_WSI_PLATFORM_DISPLAY];
 
+#ifdef DETECT_OS_ANDROID
+   struct sigaction actions;
+   memset(&actions, 0, sizeof(actions));
+   sigemptyset(&actions.sa_mask);
+   actions.sa_flags = 0;
+   actions.sa_handler = thread_signal_handler;
+   sigaction(SIGUSR2, &actions, NULL);
+#endif
+
    if (wsi) {
       wsi_for_each_connector(connector, wsi) {
          wsi_for_each_display_mode(mode, connector) {
@@ -2351,7 +2384,11 @@ wsi_display_finish_wsi(struct wsi_device *wsi_device,
       wsi_display_stop_wait_thread(wsi);
 
       if (wsi->hotplug_thread) {
+#ifdef DETECT_OS_ANDROID
+         pthread_kill(wsi->hotplug_thread, SIGUSR2);
+#else
          pthread_cancel(wsi->hotplug_thread);
+#endif
          pthread_join(wsi->hotplug_thread, NULL);
       }
 
diff --git a/src/vulkan/wsi/wsi_common_drm.c b/src/vulkan/wsi/wsi_common_drm.c
index 63995c6..fb5c6d9 100644
--- a/src/vulkan/wsi/wsi_common_drm.c
+++ b/src/vulkan/wsi/wsi_common_drm.c
@@ -24,6 +24,7 @@
 #include "wsi_common_private.h"
 #include "wsi_common_drm.h"
 #include "util/macros.h"
+#include "util/detect_os.h"
 #include "util/os_file.h"
 #include "util/log.h"
 #include "util/xmlconfig.h"
@@ -45,6 +46,9 @@
 static VkResult
 wsi_dma_buf_export_sync_file(int dma_buf_fd, int *sync_file_fd)
 {
+#ifdef DETECT_OS_ANDROID
+   return VK_ERROR_FEATURE_NOT_PRESENT;
+#else
    /* Don't keep trying an IOCTL that doesn't exist. */
    static bool no_dma_buf_sync_file = false;
    if (no_dma_buf_sync_file)
@@ -68,11 +72,15 @@ wsi_dma_buf_export_sync_file(int dma_buf_fd, int *sync_file_fd)
    *sync_file_fd = export.fd;
 
    return VK_SUCCESS;
+#endif
 }
 
 static VkResult
 wsi_dma_buf_import_sync_file(int dma_buf_fd, int sync_file_fd)
 {
+#ifdef DETECT_OS_ANDROID
+   return VK_ERROR_FEATURE_NOT_PRESENT;
+#else
    /* Don't keep trying an IOCTL that doesn't exist. */
    static bool no_dma_buf_sync_file = false;
    if (no_dma_buf_sync_file)
@@ -94,6 +102,7 @@ wsi_dma_buf_import_sync_file(int dma_buf_fd, int sync_file_fd)
    }
 
    return VK_SUCCESS;
+#endif
 }
 
 static VkResult
diff --git a/src/vulkan/wsi/wsi_common_x11.c b/src/vulkan/wsi/wsi_common_x11.c
index 52a388e..d7b37c5 100644
--- a/src/vulkan/wsi/wsi_common_x11.c
+++ b/src/vulkan/wsi/wsi_common_x11.c
@@ -450,7 +450,9 @@ wsi_x11_get_connection(struct wsi_device *wsi_dev,
 
 static const VkFormat formats[] = {
    VK_FORMAT_R5G6B5_UNORM_PACK16,
+#ifndef DETECT_OS_ANDROID
    VK_FORMAT_B8G8R8A8_SRGB,
+#endif
    VK_FORMAT_B8G8R8A8_UNORM,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32,
 };
@@ -1400,7 +1402,9 @@ x11_present_to_x11_dri3(struct x11_swapchain *chain, uint32_t image_index,
       options |= XCB_PRESENT_OPTION_SUBOPTIMAL;
 #endif
 
+#ifndef DETECT_OS_ANDROID
    xshmfence_reset(image->shm_fence);
+#endif
 
    if (!chain->base.image_info.explicit_sync) {
       ++chain->sent_image_count;
@@ -1769,9 +1773,11 @@ x11_acquire_next_image(struct wsi_swapchain *anv_chain,
       return result;
 
    assert(*image_index < chain->base.image_count);
+#ifndef DETECT_OS_ANDROID
    if (chain->images[*image_index].shm_fence &&
        !chain->base.image_info.explicit_sync)
       xshmfence_await(chain->images[*image_index].shm_fence);
+#endif
 
    return result;
 }
@@ -2171,6 +2177,12 @@ x11_image_init(VkDevice device_h, struct x11_swapchain *chain,
             free(error);
             goto fail_image;
          }
+
+#ifdef DETECT_OS_ANDROID
+         image->sync_fence = 0;
+         // image->busy = false;
+         return VK_SUCCESS;
+#endif
       }
    }
 #endif
@@ -2216,9 +2228,11 @@ x11_image_finish(struct x11_swapchain *chain,
    xcb_void_cookie_t cookie;
 
    if (!chain->base.wsi->sw || chain->has_mit_shm) {
+#ifndef DETECT_OS_ANDROID
       cookie = xcb_sync_destroy_fence(chain->conn, image->sync_fence);
       xcb_discard_reply(chain->conn, cookie.sequence);
       xshmfence_unmap_shm(image->shm_fence);
+#endif
 
       cookie = xcb_free_pixmap(chain->conn, image->pixmap);
       xcb_discard_reply(chain->conn, cookie.sequence);
